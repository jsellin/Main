---
- hosts: serv5
  vars_files:
  - vars.yml
  become: yes
  tasks:
  - name: install all the required libvirt modules
    apt:
      name: "{{ item }}"
      update_cache: yes
      state: present
    loop:
      - qemu-kvm
      - libvirt-clients
      - libvirt-daemon-system
      - bridge-utils
      - libguestfs-tools
      - genisoimage
      - virtinst
      - libosinfo-bin

  - name: Configure user one
    ansible.builtin.user:
      name: libvirt
      state: present

  - name: Configure user two
    ansible.builtin.user:
      name: libvirt-qemu
      state: present

  - name: Create directory for apparmor to work
    ansible.builtin.file:
      path: /var/libvirt/images/
      state: directory
      mode: 0755

  - name: Verify virutalisation support
    shell: >
      set -o pipefail && \
        egrep -o --color 'vmx|svm' /proc/cpuinfo
    register: vmx
    args:
       executable: /bin/bash
  - debug:
      msg:
        - "If vmx or svm exists then virtualisation support is possible else change in bios {{ vmx.stdout }}"
  - name: add root user in qemu conf
    ansible.builtin.lineinfile:
      insertbefore: BOF
      line: "{{ item.line }}"
      path: /etc/libvirt/qemu.conf
      create: yes
    loop:
       - line: user = "root"
       - line: group = "root"
  - name: install operating system
    ansible.builtin.get_url:
      mode: 0755
      url: "{{ os }}"
      dest: /var/libvirt/images/debian-11.5.0-amd64-netinst.iso

  - name: Create a pool directory
    shell: >
      mkdir -p "{{ pooldir }}"

  - name: Define pool as default
    shell: >
       virsh pool-define-as --name {{ poolname }} --type dir --target {{ pooldir }}

  - name: Put the pool on autostart
    shell: >
       virsh pool-autostart {{ poolname }}
  - name: start default
    shell: >
      virsh pool-start {{ poolname }}

  - name: Current pools defined
    shell: >
     virsh pool-list
    register: pools
  - debug:
      msg:
        - "Current pools {{ pools.stdout }}"

  - name: Set up the virtual machine
    shell: >
      virt-install --hvm --name {{ vmname }} --os-variant debian10 --ram {{ ram }} --vcpus {{ cpus }} --disk size={{ disksize }},format=qcow2 --network bridge=br0,model=virtio --cdrom /var/libvirt/images/debian-11.5.0-amd64-netinst.iso --graphics vnc,listen=0.0.0.0,port={{ port1 }} --noautoconsole
    register: vm
  - debug:
      msg:
        - "Virtual machine is ready {{ vm }}"
