---
- name: download node
  hosts: root
  gather_facts: true   
  tasks:
  -  include_vars: vars.yml

  - name: install all the required Neovim build modules
    apt:
      name:
        - rsync
        - git
        - ninja-build
        - gettext
        - libtool
        - libtool-bin
        - autoconf
        - automake
        - cmake
        - g++
        - pkg-config
        - unzip
        - curl
        - doxygen
        - tmux
        - libreadline-dev
        - build-essential
        - python3-neovim
        - python3-pip
        - pkg-config
        - libncurses5-dev
        - vim   
        - xclip   
        - sqlite3 
        - libsqlite3-dev
        - ripgrep  
        - wget 
        - gnupg2 
        - openssh-server
        - apt-transport-https 
        - zsh
        - zplug
        - python3-venv
        - default-jre  
        - default-jdk  
        - xbindkeys
        - miniupnpc
        - i3    
        - libcurl4-openssl-dev
        - libx11-dev
        - libimlib2-dev
        - libxinerama-dev
        - libjpeg-progs
        - pavucontrol
        - pulseaudio
        - rofi 
        - dbus-x11 
        - libnotify-bin
        - i3blocks 
        - maim 
        - picom  
        - net-tools  
      state: present   
      
  - name: Edit parameters in sshd config to enable xauthority file         
    tags: replace4
    ansible.builtin.replace:
      path: /etc/ssh/sshd_config
      regexp: '^#X11 Forwarding yes' 
      replace: 'X11 Forwarding yes'

  - name: Edit parameters in sshd config to enable xauthority file         
    tags: replace5
    ansible.builtin.replace:
      path: /etc/ssh/sshd_config
      regexp: '^#X11DisplayOffset 10' 
      replace: 'X11DisplayOffset 10'
      
  - name: Edit parameters in sshd config to enable xauthority file         
    tags: replace5
    ansible.builtin.replace:
      path: /etc/ssh/sshd_config
      regexp: '^#X11UseLocalhost yes' 
      replace: 'X11UseLocalhost yes'
      
  - name: Disable ipv6 
    tags: ip6 
    ansible.builtin.lineinfile:
      path: /etc/sysctl.conf
      line: '{{ item }}'
    with_items: 
      - 'net.ipv6.conf.all.disable_ipv6 = 1'
      - 'net.ipv6.conf.default.disable_ipv6 = 1'
      - 'net.ipv6.conf.lo.disable_ipv6 = 1'

  - name: Reload the ipv6 config        
    shell: > 
      sysctl -p 
    become: yes

  - name: Create folder
    tags: folder1
    ansible.builtin.file:
      path: '{{ item }}' 
      owner: root 
      mode: '0755'
      state: directory  
    with_items:
      - '/root/.config'
      - '/etc/ansible'
      - 'root/.config/nvim'
      - 'root/.config/gtk-3.0' 
      - '/root/.local/share/rofi/themes/'
      - '/root/.config/i3/'
      - '/root/Pictures'
      - '/root/.config/rofi'
      - '/root/.config/i3blocks'

  - name: copy over config folder
    tags: cp
    synchronize:
      src: ~/Pictures/
      dest: ~/Pictures/ 
      mode: push

  - name: unarchive lua 
    tags: lua
    ansible.builtin.unarchive:
      src: http://www.lua.org/ftp/lua-5.4.4.tar.gz
      dest: /root/
      remote_src: yes

  - name: build lua binaries
    tags: buildlua
    shell: >
      cd ~/lua-5.4.4 && make linux test; sudo make install 
    register: targ
   
  - debug: var=targ.stdout_lines

  - name: Make sure /etc/localtime is absent  
    tags: localtime 
    ansible.builtin.file:
      path: /etc/localtime
      state: absent 
    
  - name: Create a Symbolic link between Correct TimeZone and /etc/localtime    
    tags: symlink1 
    ansible.builtin.file:
      src: /usr/share/zoneinfo/Europe/Stockholm
      dest: /etc/localtime 
      state: link 
      force: yes 

  - name: Prevent relese file from complaining       
    shell: > 
      timedatectl set-local-rtc 0
    become: yes

  - name: Prevent agen 
    shell: > 
      apt-get -o Acquire::Check-Valid-Until=false -o Acquire::Check-Date=false update
    become: yes   


 
  - name: Clone neovim repo
    ansible.builtin.git:
      repo: https://github.com/neovim/neovim
      dest: /root/neovim
    ignore_errors: true 


  - name: Build Neovim with cmake
    tags: cmakee
    ansible.builtin.make:
      chdir: /root/neovim
      target: CMAKE_BUILD_TYPE=RelWithDebInfo
    register: cmakee
    changed_when: cmakee.stdout.find("Stopped")==40 
        
  - name: Download the AppImage
    tags: appimage
    ansible.builtin.get_url:
      url: https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
      dest: /usr/local/bin/nvim.appimage
      mode: '0775'

  - name: Add some good shorcuts to bashrc
    tags: linefile
    ansible.builtin.lineinfile:
      path: ~/.bashrc
      line: '{{ item }}'
    with_items: 
      - 'alias nvim="/usr/local/bin/nvim.appimage"'
      - 'alias conf="cd /root/.config/nvim/lua/core/plugin_config"'
      - 'alias serv5="ssh root@192.168.1.205 -p 20010"'
      - 'alias nextcloud="ssh root@nextcloud -p 2223"'
      - 'alias debianz="ssh root@192.168.1.108 -p 2222"'
      - 'alias vm1="ssh root@vm1 -p 2217"'
      - 'alias vm2="ssh root@192.168.1.225 -p 2218"'
      - 'alias debian="ssh root@192.168.1.146 -p 2222"'
      - 'alias snap5="virsh snapshot-revert vm2 snapshot_5"'
      - 'PATH=$PATH:/usr/local/bin/'

  - name: Extract Appimage
    shell: >
      cd /usr/local/bin/ && ./nvim.appimage --appimage-extract; ./squashfs-root/AppRun --version; 
    register: output 

  - name: expose nvim globally 
    tags: expose
    shell: >  
      cd /usr/local/bin/ && sudo mv squashfs-root /; sudo ln -s /squashfs-root/AppRun /usr/local/bin/nvim
    args:  
       creates: /usr/local/bin/nvim

  - name: add file path
    shell: >
      mkdir -p "{{ dest1 }}"
    args: 
      creates: "{{ dest1 }}"

  - name: install specified node from vars.yml
    become: yes
    ansible.builtin.get_url:
      url: "{{ src1 }}"
      dest: "{{ dest1 }}"
      mode: 0775
  
  - name: fix
    shell: >
      ls "{{ dest1 }}"*  
    register: output

  - name: Extract nodejs 
    ansible.builtin.unarchive:
      src: "{{ output.stdout }}"
      dest: "{{ dest2 }}"
      remote_src: yes

  - name: output 
    shell: >
      echo $(cd {{ dest2 }} && ls -d node*)
    register: bde
    args:
      creates: /usr/local/bin/node

  - name: cd in path and copy to bin folder 
    shell: >
      cd {{dest2}}/{{bde.stdout}} && cp -p bin/node /usr/local/bin/
    args:
      creates: /usr/local/bin/node

  - name: Make sure this node version takes precedence over other node versions
    shell: > 
      update-alternatives --install /usr/bin/node node /usr/local/bin/node 1 && node -v 
    register: node
  - debug:
      msg:
        - "Node Version {{ node.stdout_lines }}" 
  
  - name: install specified node from vars.yml
    tags: node1 
    shell: >
      curl -L https://www.npmjs.com/install.sh | sh
    register: out12
  - debug:
      msg: 
        - "{{ out12.stdout }}"
      
  - name: Update alternatives
    shell: >
      update-alternatives --install /usr/bin/npm npm /usr/local/lib/node_modules/npm/bin/npm-cli.js 1 && update-alternatives --display npm && npm -v
    register: npm
  - debug:
      msg:
        - "npm version {{ npm.stdout_lines }}"

  - name: copy over config folder
    tags: cp
    synchronize:
      src: ~/.config/nvim/
      dest: ~/.config/nvim/ 
      mode: push

  - name: Copy over zsh config folder 
    tags: zsh 
    synchronize:  
      src: ~/.zshrc 
      dest: ~/.zshrc
      mode: push

  - name: copy over vimrc folder
    tags: vimrc
    synchronize:
      src: ~/.vimrc
      dest: ~/.vimrc 
      mode: push

  - name: Install Vim plug for ansible
    tags: plugg
    shell: >
      curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    args:   
      creates: ~/.local/share/nvim/site/autoload/plug.vim 

        #  - name: Create a symbolic link between vimrc and init.vim
        #tags: symlink
        #ansible.builtin.file:
        #src: ~/.vimrc
        #dest: ~/.config/nvim/lua/core/plugin_config/init.vim
        #state: link
        #force: yes
  
  - name: Make sure /etc/localtime is absent  
    tags: localtime 
    ansible.builtin.file:
      path: /etc/localtime
      state: absent 
    
  - name: Create a Symbolic link between Correct TimeZone and /etc/localtime    
    tags: symlink1 
    ansible.builtin.file:
      src: /usr/share/zoneinfo/Europe/Stockholm
      dest: /etc/localtime 
      state: link 
      force: yes  

  - name: Update timezone 
    shell: >
      hwclock --utc --hctosys

  - name: Remove Ansible if present
    ansible.builtin.apt:
      name: ansible
      state: absent

  - name: Add keys for ansible to get the latest version 
    tags: sources
    ansible.builtin.lineinfile:
      path: /etc/apt/sources.list
      line: '{{ item }}'
    with_items: 
      - 'deb http://ppa.launchpad.net/ansible/ansible/ubuntu bionic main'

  - name: Add keys for ansible  
    tags: keyss
    ansible.builtin.apt_key:
      id: 93C4A3FD7BB9C367
      keyserver: keyserver.ubuntu.com
      state: present
    become: true

  - name: Update and install ansible 
    tags: ansi 
    ansible.builtin.apt:
      update_cache: yes
      name: ansible
      state: latest 
  
  - name: remove ansible if present and download it with pip3 instead 
    tags: ansi2 
    ansible.builtin.apt:
      name: ansible 
      state: absent 

  - name: install Ansible-lint
    tags: lint
    ansible.builtin.pip:
      executable: pip3
      name: '{{ item }}' 
    with_items:
      - ansible-lint  
      - ansible
    ignore_errors: true    
  
  - name: Create Screen for source 
    tags: screen 
    shell: >
      bash -c 'tmux new-session -d -s source123; sleep 2' 
    ignore_errors: true 

  - name: Source zshrc file
    tags: rc
    shell: >
      tmux send-keys -t source123 'zsh && source ~/.zshrc' Enter 

  - name: Add zsh as default shell 
    tags: default 
    shell: > 
     chsh -s $(which zsh)

  - name: Install Go  
    tags: go 
    ansible.builtin.unarchive:
      src: https://go.dev/dl/go1.20.2.linux-amd64.tar.gz
      dest: /usr/local
      remote_src: yes

  - name: Add go path to zshrc 
    tags: profile
    ansible.builtin.lineinfile:
      path: ~/.zshrc
      line: '{{ item }}'
    with_items: 
      - 'export PATH=$PATH:/usr/local/go/bin'
      - 'alias h=hstr # h to be alias for hstr'
      - 'setopt histignorespace # skip cmds w/ leading space from history'
      - 'export HSTR_CONFIG=hicolor # get more colors'
      - 'bindkey -s "\C-r" "\C-a hstr -- \C-j" # bind hstr to Ctrl-r (for Vi mode check doc)'

  - name: Install Cargo
    tags: cargo 
    shell: >
      tmux send-keys -t source123 "curl https://sh.rustup.rs -sSf | sh" Enter 

  - name: Press 1 in the installation prompt in the tmux session  
    tags: prompt 
    shell: > 
      tmux send-keys -t source123 ""1 Enter

  - name: Source Cargo 
    tags: cargosource 
    shell: >
      tmux send-keys -t source123 "source $HOME/.cargo/env" Enter 
            
  - name: install luarocks  
    tags: luarocks 
    ansible.builtin.unarchive:
      src: https://luarocks.org/releases/luarocks-3.9.2.tar.gz 
      dest: /root/
      remote_src: yes

  - name: make lua 
    tags: makeluA
    shell: >
      tmux send-keys -t source123 "cd /root/luarocks-3.9.2 && ./configure && make && sudo make install" Enter 

  - name: install luasocket 
    shell: >
      tmux send-keys -t source123 "sudo luarocks install luasocket" Enter 

  - name: install tree-sitter-cli 
    shell: > 
      tmux send-keys -t source123 "cargo install tree-sitter-cli" Enter  

  - name: add keys for yarn 
    shell: > 
      curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - && echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list

  - name: update cache 
    ansible.builtin.apt:
      update_cache: yes

  - name: install yarn 
    shell: > 
      apt install --no-install-recommends yarn
    become: yes

  - name: Source zshrc file
    tags: rc
    shell: >
      tmux send-keys -t source123 'zsh && source ~/.zshrc' Enter 

  - name: Install nvm
    tags: nvm
    shell: >
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
    args:
      creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"

  - name: use specific nvm version 
    tags: nvm1 
    shell: > 
      tmux send-keys -t source123 "nvm install 18.7.0" Enter 

  - name: install neovim with npm  
    shell: > 
      npm i -g neovim
      
  - name: install bash language server 
    shell: > 
      npm i -g bash-language-server

  - name: Create config file for paste button and for xbindkeys  
    tags: file6 
    ansible.builtin.file:
      path: '{{ item }}' 
      state: touch    
      mode: u+rw,g-wx,o-rwx
    with_items: 
      - '/root/.config/gtk-3.0/settings.ini'  
      - '/root/.xbindkeysrc'
      - '~/.config/picom.conf'
      - '/etc/systemd/system/pulseaudio.service'
      - '/root/.config/rofi'
      - '/root/.xinitrc'
      - '/root/.Xauthority'  
      
  - name: Add configs to xinitrc  
    tags: xinitrc 
    ansible.builtin.lineinfile:
      path: /root/.xinitrc
      line: '{{ item }}'
    with_items: 
      - 'picom -b --config ~/.config/picom.conf'
      - 'i3-msg restart > /dev/null; echo "restarting i3 config"'


  - name: Make so that we can paste with the middle mouse button 
    tags: line2
    ansible.builtin.lineinfile:
      path: /root/.config/gtk-3.0/settings.ini
      line: '{{ item }}'
    with_items: 
      - '[Settings]'
      - '[gtk-enable-primary-paste=true]'

  - name: Disable wayland and enable X11  
    tags: x11 
    ansible.builtin.lineinfile:
      path: /etc/gdm3/daemon.conf
      line: '{{ item }}'
    with_items: 
      - 'WaylandEnable=false'

  - name: Enable checking for history of commands typed 
    shell: > 
      bash -c 'echo -e "\ndeb https://www.mindforger.com/debian stretch main" > /etc/apt/sources.list.d/mindforger.list'
    become: yes   
    args:
       creates: /etc/apt/sources.list.d/mindforger.list 
    
  - name: Add Key 
    shell: > 
      wget -qO - https://www.mindforger.com/gpgpubkey.txt | sudo apt-key add -
 
  - name: update cache 
    ansible.builtin.apt:
      update_cache: yes
      name: hstr 
      state: latest 

  - name: restart sshd config 
    ansible.builtin.service:
      name: sshd
      state: restarted
      enabled: true

  - name: Grab open ssh port for easier access when we are away from home.         
    tags: grab 
    shell: >
      systemctl status ssh | awk '{if(/port/) print $11}' | sort -u | sed -e 's/\.//g' | sed '2s/^[ \t]*//'
    register: port   

  - name: Create file for systemd script  
    tags: file4 
    ansible.builtin.file:
      path: '{{ item }}' 
      state: touch    
      mode: u+rw,g-wx,o-rwx
    with_items: 
      - /etc/systemd/system/startup.service
      - /var/startup.sh   
    
  - name: populate systemd with the conf 
    tags: systemd 
    ansible.builtin.lineinfile:
      path: /etc/systemd/system/startup.service
      line: '{{ item }}'
    with_items: 
      - '[Unit]' 
      - 'Description=Example systemd service.'
     
      - '[Service]'
      - 'Type=simple' 
      - 'ExecStart=/bin/bash /var/startup.sh'
     
      - '[Install]' 
      - 'WantedBy=multi-user.target'

  - name: populate startup script the the port conf  
    tags: startup 
    ansible.builtin.lineinfile:
      path: /var/startup.sh
      line: '{{ item }}'
    with_items: 
      - 'upnpc -r {{ port.stdout }} tcp'
      - 'picom &'  

  - name: Start service
    tags: service12
    systemd:
      name: startup
      state: started
      enabled: true   
    register: service12 

  - debug: var=service12.stdout

  
  - name: Add targetd user to root group 
    shell: > 
      systemctl status ssh | awk '{if(/port/) print $4}' | sort -u | sed -e 's/\.//g' | sed '2s/^[ \t]*//'
    register: rootuser

  - name: Make sure we have a wheel group for passwordless root 
    group: 
      name: wheel 
      state: present
  
  - name: Allow 'wheel' group to have passwordless sudo
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%wheel'
      line: '%wheel ALL=(ALL) NOPASSWD: ALL'
      validate: 'visudo -cf %s' 

  - name: Add sudoers users to wheel group
    user:
      name={{ rootuser.stdout }}
      groups=wheel
      append=yes
      state=present
  
  - name: Set up authorized keys for the deployer user
    authorized_key: user={{ rootuser.stdout }} key="{{item}}"
    with_file:
      - ~/.ssh/id_rsa.pub 
 
  - name: Update Packer    
    tags: update123 
    shell: > 
      tmux send-keys -t source123 "nvim +PackerUpdate" Enter Enter

  - name: Kill Window
    tags: q1 
    shell: > 
      tmux send-keys -t source123 "" :qa Enter 

  - name: Compile Packer 
    tags: compile123 
    shell: > 
      tmux send-keys -t source123 "nvim +PackerCompile" Enter Enter 

  - name: Kill Window
    tags: q2 
    shell: > 
      tmux send-keys -t source123 "" :qa Enter 
  
  - name: Sync Packer 
    tags: sync123 
    shell: tmux send-keys -t source123 "nvim +PackerSync" Enter Enter


  - name: Kill Window
    tags: q3 
    shell: > 
      tmux send-keys -t source123 "" :qa Enter 
       
  - name: Source and install the vim plugins 
    tags: vims 
    shell: nvim --headless -c +source ~/.config/nvim/lua/core/plugin_config/init.vim +PlugUpdate +qa

  - name: Add ansible-language-server 
    tags: lang 
    shell: >
      nvim --headless "+:MasonInstall ansible-language-server" +qa

  - name: Add aws-language-server
    tags: lang 
    shell: >
      nvim --headless "+:MasonInstall awk-language-server" +qa
 
  - name: Add bash-debug-adapter
    tags: lang12 
    shell: >
      nvim --headless "+:MasonInstall bash-debug-adapter" +qa

  - name: Add diagnostic-languageserver
    tags: lang13 
    shell: >
      nvim --headless "+:MasonInstall diagnostic-languageserver" +qa

  - name: Add lint flake8  
    tags: lang 
    shell: >
      nvim --headless "+:MasonInstall flake8" +qa

  - name: Add jedi-language-server
    tags: lang 
    shell: >
      nvim --headless "+:MasonInstall jedi-language-server" +qa

  - name: Add jq language-server 
    tags: lang 
    shell: >
      nvim --headless "+:MasonInstall jq" +qa

  - name: Add lua-language-server
    tags: lang 
    shell: >
      nvim --headless "+:MasonInstall lua-language-server" +qa

  - name: Add pyright 
    tags: lang 
    shell: >
      nvim --headless "+:MasonInstall pyright" +qa

  - name: Add python-lsp-server 
    tags: lang 
    shell: >
      nvim --headless "+:MasonInstall python-lsp-server" +qa

  - name: Add shell-check language-server 
    tags: lang 
    shell: >
      nvim --headless "+:MasonInstall shellcheck" +qa
    
  - name: Add yaml-language-server
    tags: lang 
    shell: >
      nvim --headless "+:MasonInstall yaml-language-server" +qa
      
  - name: Add yamlint language server 
    tags: yamllint 
    shell: >
      nvim --headless "+:MasonInstall yamllint" +qa

  
  - name: copy over config folder
    tags: cp3
    synchronize:
      src: ~/.config/i3/config
      dest: ~/.config/i3/config 
      mode: push
     
  - name: populate picom conf  
    tags: picom1 
    ansible.builtin.lineinfile:
      path: ~/.config/picom.conf
      line: '{{ item }}'
    with_items: 
      - 'inactive-opacity = 0.80;'
      - 'active-opacity = 0.80;'
      - 'frame-opacity = 0.80;'

  - name: Install Feh for backround 
    tags: feh  
    ansible.builtin.unarchive:
      src: https://feh.finalrewind.org/feh-3.9.1.tar.bz2
      dest: /usr/local
      remote_src: yes

  - name: build feh 
    tags: buildfeh
    shell: >
      cd /usr/local/feh-3.9.1 && make; sudo make install 
    register: targ1
   
  - debug: var=targ1.stdout_lines
   
  - name: update alternatives set i3 as default window manager 
    shell: >
      update-alternatives --install /usr/bin/x-session-manager x-session-manager /usr/bin/i3 60
 
  - name: install all the required Neovim build modules
    apt:
      name:
        - lightdm
        - plymouth 
        - xauth 
        - xorg 
        - openbox   
        - plymouth-themes 
        - plymouth-label 
        - firmware-sof-signed
        - python3-xlib 
        - python3-pillow 
        - python3-i3ipc   
      state: present    
 
  - name: enable light dm 
    tags: light
    shell: >
      tmux send-keys -t source123 'sudo dpkg-reconfigure lightdm' Enter
  
  - name: chose lightdm 
    tags: choose 
    shell: > 
      tmux send-keys -t source123 "" Enter Enter   
   
  - name: make sure service is enabled by default 
    tags: lightdm123
    systemd:
      name: lightdm 
      enabled: true   
    register: service12 

  - name: Ignore lid   
    tags: replace 
    ansible.builtin.replace:
      path: /etc/systemd/logind.conf
      regexp: '(^\#HandleLidSwitch=suspend\s)(.*)$' 
      replace: "HandleLidSwitch=ignore"  

  - name: Ignore agen just in case    
    tags: replace1 
    ansible.builtin.replace:
      path: /etc/UPower/UPower.conf 
      regexp: '^IgnoreLid=false' 
      replace: "IgnoreLid=true"  

      # Placed here by {{ lookup('env','USER') }} using Ansible, {{ ansible_date_time.date }}.
      #msg="{{ lookup('env','HOME') }}"
      #msg: System {{ ansible_env.HOME }} has gateway {{ ansible_default_ipv4.gateway }}

  - name: Print all available facts
    tags: host2
    ansible.builtin.debug:
       msg: "{{ ansible_hostname }}"


  - name: Add systemd script for Pulseaudio.  
    tags: systemd1 
    ansible.builtin.lineinfile:
      path: /etc/systemd/system/pulseaudio.service 
      line: '{{ item }}'
    with_items:  
      - '[Unit]'
      - 'Description=PulseAudio system server'

      - '[Service]'
      - 'Type=notify'
      - 'ExecStart=pulseaudio --daemonize=no --system --realtime --log-target=journal'

      - '[Install]'
      - ' WantedBy=multi-user.target'

  - name: Start pulseaudio 
    tags: puls1
    ansible.builtin.service:
      name: pulseaudio.service
      state: started #--system 
 
  - name: enable pulseaudio 
    tags: puls33
    ansible.builtin.service:
      name: pulseaudio
      daemon_reload: true 
      enabled: true 

  - name: add parameters to pulseaudio      
    tags: replace3 
    ansible.builtin.replace:
      path: /etc/pulse/client.conf  
      regexp: '^; default-server =' 
      replace: "default-server = /var/run/pulse/native"   

  - name: add parameters to Pulseaudio       
    tags: replace4
    ansible.builtin.replace:
      path: /etc/pulse/client.conf  
      regexp: '^; autospawn = yes' 
      replace: 'autospawn = no'

  - name: Add add root user to pulse group 
    tags: pulse12 
    user:
      name: pulse-access
      groups: sudo 
      append: yes 
    become: yes
 
  - name: copy over rofi config folder 
    tags: cp111
    synchronize:
      src: /root/.config/rofi/config.rasi
      dest: /root/.config/rofi/config.rasi 
      mode: push

  - name: Clone rofi themes repo
    tags: rofi2
    ansible.builtin.git:
      repo: https://github.com/lr-tech/rofi-themes-collection.git
      dest: /root/.local/share/rofi

        #  - name: copy over theme you want to use for dmenu   
        # tags: dmenu1 
        # shell: >
        #cp -r /root/.local/share/rofi/themes/squared-everforest.rasi /root/.local/share/rofi/themes/

  - name: Add dbus to xinitrc for notifications to work.   
    tags: systemd1 
    ansible.builtin.lineinfile:
      path: /root/.xinitrc 
      line: '{{ item }}'
    with_items:  
      - 'export $(dbus-launch)'

  - name: copy i3blocks config  
    tags: i3blocks
    synchronize:
      src: /root/.config/i3blocks/
      dest: /root/.config/i3blocks/
      mode: push

  - name: copy over .zsh_history  
    tags: i3blocks
    synchronize:
      src: /root/.zsh_history
      dest: /root/.zsh_history
      mode: push



